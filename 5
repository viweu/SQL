задание 1
 CREATE PROCEDURE GetEmployeeOrders(IN emp_id INT)
 BEGIN
 SELECT
 o.order_id,
 o.order_date,
 c.customer_name
FROM
 Orders o
 JOIN
 Customers c ON o.customer_id = c.customer_id
 WHERE
 o.employee_id = emp_id;
 END;
 CALL GetEmployeeOrders(1);

 задание 2
  CREATE VIEW EmployeeOrderSummary AS
 SELECT
 e.employee_name,
 SUM(o.total_amount) AS total_sales
 FROM
 Employees e
 JOIN
 Orders o ON e.employee_id = o.employee_id
 GROUP BY
 e.employee_name;
 SELECT * FROM EmployeeOrderSummary;

задание 3
 SELECT
 e.employee_name,
 o.order_id,
 o.total_amount,
 RANK() OVER (PARTITION BY e.employee_id ORDER BY o.total_amount
 DESC) AS order_rank
 FROM
 Employees e
 JOIN
 Orders o ON e.employee_id = o.employee_id;

 задание 4
  SELECT
 order_id,
 order_date,
 LAG(order_date) OVER (ORDER BY order_date) AS prev_order_date,
 LEAD(order_date) OVER (ORDER BY order_date) AS next_order_date
 FROM
 Orders;

 задание 5
  SELECT
 e.employee_name,
 o.order_id,
o.total_amount,
 AVG(o.total_amount) OVER (PARTITION BY e.employee_id) AS
 avg_amount,
 MIN(o.total_amount) OVER (PARTITION BY e.employee_id) AS
 min_amount,
 MAX(o.total_amount) OVER (PARTITION BY e.employee_id) AS
 max_amount
 FROM
 Employees e
 JOIN
 Orders o ON e.employee_id = o.employee_id;

 задание 6
  CREATE VIEW OrderAnalysis AS
SELECT
 e.employee_name,
 c.customer_name,
 o.order_id,
 o.total_amount,
 RANK() OVER (PARTITION BY e.employee_id ORDER BY o.total_amount
 DESC) AS order_rank,
 AVG(o.total_amount) OVER (PARTITION BY e.employee_id) AS
 avg_amount,
 MIN(o.total_amount) OVER (PARTITION BY e.employee_id) AS
 min_amount,
 MAX(o.total_amount) OVER (PARTITION BY e.employee_id) AS
 max_amount,
 LAG(o.order_date) OVER (ORDER BY o.order_date) AS
 prev_order_date,
 LEAD(o.order_date) OVER (ORDER BY o.order_date) AS
 next_order_date
 FROM
 Employees e
 JOIN
 Orders o ON e.employee_id = o.employee_id
 JOIN
 Customers c ON o.customer_id = c.customer_id;
 SELECT * FROM OrderAnalysis;
